{"version":3,"sources":["components/cards/index.js","components/wrapper/index.js","components/nav/nav.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","hitAndShuffle","id","src","image","alt","name","Wrapper","children","Nav","Fragment","count","guessed","reset","shuffleArray","array","i","length","j","Math","floor","random","temp","forEach","face","hit","hit2","faces","alert","console","log","faceLooper","App","state","_this","filter","setState","_this2","this","nav","wrapper","map","cards","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iqCAaeA,MAVf,SAAeC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAIL,EAAMM,cAAcN,EAAMO,KAAKC,IAAKR,EAAMS,MAAOC,IAAKV,EAAMW,uBCC/EC,MALf,SAAiBZ,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCY5BC,MAZf,SAAcd,GACV,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACAd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACXH,EAAAC,EAAAC,cAAA,uBAAeH,EAAMgB,MAArB,QACAf,EAAAC,EAAAC,cAAA,YAAOH,EAAMiB,SACbhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaC,QAAUL,EAAMkB,OAA/C,kBCWZ,SAASC,EAAaC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,GAIjB,SAAST,EAAME,GACbA,EAAMQ,QAAQ,SAAAC,GACZA,EAAKC,KAAM,EACXD,EAAKE,MAAO,IAEdZ,EAAaC,GAGf,SAASd,EAAcC,EAAIa,IA/B3B,SAAqBb,GACnB,IAAK,IAAIc,EAAI,EAAGA,EAAIW,EAAMV,OAAQD,IAC5BW,EAAMX,GAAGd,KAAOA,IAAuB,IAAjByB,EAAMX,GAAGS,IACjCE,EAAMX,GAAGS,KAAM,EACNE,EAAMX,GAAGd,KAAOA,IAAuB,IAAjByB,EAAMX,GAAGS,MACxCE,EAAMX,GAAGU,MAAO,EAChBE,MAAM,QACNC,QAAQC,IAAIH,EAAMX,KAyBtBe,CAAW7B,GACXY,EAAaC,OAyDAiB,6MAlDbC,MAAQ,CACNN,MAAOA,EACPhB,MAAO,EACPC,QAAS,MAKXX,cAAgB,SAACC,EAAIa,GACnBd,EAAcC,EAAIyB,GACdO,EAAKD,MAAMN,MAAMQ,OAAO,SAAAX,GAAI,OAAkB,IAAdA,EAAKE,OAAeT,OAAS,GAC/DJ,EAAMc,GACNO,EAAKE,SAAS,CAAET,MAAOA,EAAOhB,MAAO,EAAGC,QAAS,oDACjDiB,QAAQC,IAAI,MAEZI,EAAKE,SAAS,CAAET,MAAOA,EAAOhB,MAAOuB,EAAKD,MAAMtB,MAAQ,EAAGC,QAAS,6BAKxEC,MAAQ,SAAAE,GACNF,EAAMc,GACNO,EAAKE,SAAS,CAAET,MAAOA,EAAOhB,MAAO,6EAI9B,IAAA0B,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACAd,EAAAC,EAAAC,cAACyC,EAAD,CACA3B,QAAS0B,KAAKL,MAAMrB,QACpBC,MAAQyB,KAAKzB,MACbF,MAAQ2B,KAAKL,MAAMtB,QAEnBf,EAAAC,EAAAC,cAAC0C,EAAD,KACGF,KAAKL,MAAMN,MAAMc,IAAI,SAAAjB,GAAI,OACxB5B,EAAAC,EAAAC,cAAC4C,EAAD,CACEzC,cAAgBoC,EAAKpC,cACrBC,GAAIsB,EAAKtB,GACTyC,IAAMnB,EAAKtB,GACXE,MAAQoB,EAAKpB,MACbE,KAAOkB,EAAKlB,kBA1CNsC,IAAMC,WClCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d74a31ba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction Card (props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"img-container\">\r\n                <img onClick={()=>props.hitAndShuffle(props.id)} src={props.image} alt={props.name}></img>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n\r\n//import React from \"react\";\r\n// import \"./styles.css\";\r\n\r\n// function Card (props) {\r\n//     return (\r\n//         <div className=\"flip-card card\">\r\n//             <div className=\"flip-card-inner\">\r\n//                     <div className=\"flip-car-front img-container\">\r\n//                         <img onClick={()=>props.hitAndShuffle(props.id)} src={props.image} alt={props.name}></img>\r\n//                     </div>\r\n//                     <div class=\"flip-card-back\">\r\n//                         <img onClick={()=>props.hitAndShuffle(props.id)} src={props.image} alt={props.name}></img>\r\n//                     </div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Card;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./styles.css\"\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\n\r\nexport default Wrapper","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\n\r\nfunction Nav (props) {\r\n    return (\r\n        <>\r\n        <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n            <span>You are {props.count}/12!</span>\r\n            <span>{props.guessed}</span>\r\n            <button className=\"btn-danger\" onClick= {props.reset}>RESET</button>\r\n        </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\nimport Card from \"./components/cards\";\nimport faces from \"./components/faces.json\";\nimport Wrapper from \"./components/wrapper\";\nimport Nav from \"./components/nav/nav\";\nimport \"./App.css\";\n\nfunction faceLooper (id) {\n  for (var i = 0; i < faces.length; i ++) {\n    if (faces[i].id === id && faces[i].hit === false) {\n      faces[i].hit = true;\n    } else if (faces[i].id === id && faces[i].hit === true) {\n      faces[i].hit2 = true;\n      alert(\"nope\");\n      console.log(faces[i])\n    }\n     \n  }\n  return\n}\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n}\n\nfunction reset(array) {\n  array.forEach(face => {\n    face.hit = false;\n    face.hit2 = false\n  });\n  shuffleArray(array)\n}\n\nfunction hitAndShuffle(id, array) {\n  faceLooper(id);\n  shuffleArray(array)\n}\n\n\n\n\nclass App extends React.Component {\n  state = {\n    faces: faces,\n    count: 0,\n    guessed: \"\"\n\n  };\n  \n\n  hitAndShuffle = (id, array) => {\n    hitAndShuffle(id, faces);\n    if (this.state.faces.filter(face => face.hit2 === true).length > 0) {\n      reset(faces)\n      this.setState({ faces: faces, count: 0, guessed: \"Ooof you guessed the same one twice. Try again.\"})\n      console.log(\"y\")\n    } else {\n      this.setState({ faces: faces, count: this.state.count + 1, guessed: \"You guessed Correctly\" })\n    }    \n    \n  }\n  \n  reset = array => {\n    reset(faces);\n    this.setState({ faces: faces, count: 0 })\n  }\n\n\n  render() {\n    return (\n      <>\n      <Nav\n      guessed={this.state.guessed}\n      reset= {this.reset}\n      count= {this.state.count}\n      />\n      <Wrapper>\n        {this.state.faces.map(face => (\n          <Card\n            hitAndShuffle= {this.hitAndShuffle}\n            id={face.id}\n            key= {face.id}\n            image= {face.image}\n            name= {face.name}\n            />\n        ))}\n      </Wrapper>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}